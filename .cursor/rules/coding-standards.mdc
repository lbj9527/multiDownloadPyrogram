---
description: 
globs: 
alwaysApply: true
---
# 代码规范和质量要求

## 设计原则
严格遵循以下设计原则：

### 模块化设计 (CQ-001)
- 功能模块必须分离，降低耦合度
- 客户端管理、下载器、任务管理、工具模块完全独立
- 模块间通过清晰的接口通信
- 避免循环依赖

### 单一职责原则 (CQ-002)  
- 每个类只负责一个明确的功能
- 每个函数功能必须原子化
- 避免上帝类和万能函数
- 代码复用性要良好

### 文件组织要求
- 按功能模块组织目录结构
- 文件命名规范统一（snake_case）
- 配置文件独立管理
- 单个文件代码量控制在500行以内

## 编码规范

### Python代码风格
- 遵循PEP 8规范
- 使用type hints进行类型注解
- 函数和类必须有详细的docstring
- 异常处理必须具体，避免裸except

### 命名规范
```python
# 类名：PascalCase
class ClientManager:
    pass

# 函数名和变量名：snake_case  
def download_media():
    file_path = "path/to/file"

# 常量：UPPER_SNAKE_CASE
MAX_RETRY_COUNT = 3

# 私有方法：前缀下划线
def _internal_method():
    pass
```

### 错误处理规范
- 所有网络操作必须有重试机制
- 使用自定义异常类，参考 [exceptions.py](mdc:src/utils/exceptions.py)
- FloodWait异常必须正确处理
- 记录详细的错误日志

### 日志规范
- 使用统一的日志管理器 [logger.py](mdc:src/utils/logger.py)
- 日志级别使用：DEBUG, INFO, WARNING, ERROR, CRITICAL
- 关键操作必须记录日志
- 敏感信息不能记录到日志中

## 性能要求

### 并发性能
- 多客户端并发必须比单客户端性能提升30%以上
- 大文件分片下载成功率>95%
- 小文件下载延迟<5秒
- 整体下载失败率<5%

### 内存管理
- 避免内存泄漏
- 大文件分片下载时控制内存使用
- 及时释放不用的资源
- 客户端连接池合理管理

## Pyrogram特定规范

### 客户端管理
- 每个并行客户端使用独立会话文件
- 代理配置统一管理：`proxy=dict(scheme="socks5", hostname="127.0.0.1", port=7890)`
- 正确处理客户端认证流程
- 实现客户端故障自动切换

### 媒体下载
- 使用`download_media()`进行常规下载
- 使用`stream_media()`进行分片下载
- 使用`get_media_group()`处理媒体组
- 实现下载进度回调

### 异常处理
- 必须处理FloodWait异常
- 网络异常自动重试
- 认证异常正确处理
- 限流异常智能等待

